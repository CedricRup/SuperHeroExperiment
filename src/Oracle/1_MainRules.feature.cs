// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Oracle
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class MainRulesFeature : object, Xunit.IClassFixture<MainRulesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "1_MainRules.feature"
#line hidden
        
        public MainRulesFeature(MainRulesFeature.FixtureData fixtureData, Oracle_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Main Rules", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
  #line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Eye",
                        "Alive",
                        "Appearances",
                        "First Appearance",
                        "Hair",
                        "Sex",
                        "Align",
                        "Id",
                        "Secret"});
            table1.AddRow(new string[] {
                        "Iceman",
                        "",
                        "Living Characters",
                        "5",
                        "Jan-11",
                        "Blond Hair",
                        "Male Characters",
                        "Neutral Characters",
                        "Secret Identity",
                        "b364bbc2-261c-4da6-8a15-1dda2c92c9bb"});
            table1.AddRow(new string[] {
                        "Charles Blackwater",
                        "",
                        "Living Characters",
                        "4",
                        "Oct-91",
                        "",
                        "Male Characters",
                        "Good Characters",
                        "Secret Identity",
                        "a92b57f0-e6eb-43c6-ac53-2efcbec811e8"});
            table1.AddRow(new string[] {
                        "Aquaria Neptunia",
                        "Blue Eyes",
                        "Living Characters",
                        "139",
                        "May-47",
                        "Blond Hair",
                        "Female Characters",
                        "Good Characters",
                        "Secret Identity",
                        "ccefd65a-0f7e-4a98-bffe-c6f9cc12ddd1"});
            table1.AddRow(new string[] {
                        "Cornfed",
                        "Red Eyes",
                        "Living Characters",
                        "6",
                        "Apr-05",
                        "Blond Hair",
                        "Male Characters",
                        "Good Characters",
                        "Secret Identity",
                        "07fc91d5-8d83-4ff4-8ad0-f5c1f81e421e"});
            table1.AddRow(new string[] {
                        "Illich Lavrov",
                        "Yellow Eyes",
                        "Living Characters",
                        "5",
                        "Oct-86",
                        "Blond Hair",
                        "Male Characters",
                        "Good Characters",
                        "Secret Identity",
                        "d3db560c-49b2-4ea3-b996-86d9dce0998f"});
            table1.AddRow(new string[] {
                        "Aleister Hook",
                        "Red Eyes",
                        "Living Characters",
                        "7",
                        "1988, March",
                        "White Hair",
                        "Male Characters",
                        "Bad Characters",
                        "Secret Identity",
                        "a534d762-0777-41d0-9571-eb8e5e021e29"});
            table1.AddRow(new string[] {
                        "Lasher",
                        "White Eyes",
                        "Living Characters",
                        "14",
                        "May-93",
                        "Bald",
                        "Agender Characters",
                        "Neutral Characters",
                        "Secret Identity",
                        "37632ead-13a7-45e4-aea3-495562265699"});
            table1.AddRow(new string[] {
                        "Mara Rice",
                        "",
                        "Living Characters",
                        "1",
                        "May-40",
                        "Black Hair",
                        "Female Characters",
                        "Good Characters",
                        "Public Identity",
                        "7fc204ac-fe4d-4cb3-b9ae-54d774525a22"});
            table1.AddRow(new string[] {
                        "Ella Pinkwater",
                        "",
                        "Living Characters",
                        "2",
                        "mars-91",
                        "Blond Hair",
                        "Female Characters",
                        "Neutral Characters",
                        "",
                        "185645c4-1664-46cc-96f4-afe39c53e931"});
#line 4
    testRunner.Given("these heroes may register", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="When nothing happens, everybody should be in standby in the Batcave")]
        [Xunit.TraitAttribute("FeatureTitle", "Main Rules")]
        [Xunit.TraitAttribute("Description", "When nothing happens, everybody should be in standby in the Batcave")]
        [Xunit.TraitAttribute("Category", "main")]
        public virtual void WhenNothingHappensEverybodyShouldBeInStandbyInTheBatcave()
        {
            string[] tagsOfScenario = new string[] {
                    "main"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When nothing happens, everybody should be in standby in the Batcave", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 17
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table2.AddRow(new string[] {
                            "Aquaria Neptunia"});
                table2.AddRow(new string[] {
                            "Iceman"});
#line 18
    testRunner.Given("these heroes registrations", ((string)(null)), table2, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Hero",
                            "Location",
                            "Action"});
                table3.AddRow(new string[] {
                            "Aquaria Neptunia",
                            "Batcave",
                            "Standby"});
                table3.AddRow(new string[] {
                            "Iceman",
                            "Batcave",
                            "Standby"});
#line 22
    testRunner.Then("the intervention plan should be", ((string)(null)), table3, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="When the end of mission event is signaled, no hero is available")]
        [Xunit.TraitAttribute("FeatureTitle", "Main Rules")]
        [Xunit.TraitAttribute("Description", "When the end of mission event is signaled, no hero is available")]
        [Xunit.TraitAttribute("Category", "main")]
        public virtual void WhenTheEndOfMissionEventIsSignaledNoHeroIsAvailable()
        {
            string[] tagsOfScenario = new string[] {
                    "main"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When the end of mission event is signaled, no hero is available", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 28
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table4.AddRow(new string[] {
                            "Aquaria Neptunia"});
                table4.AddRow(new string[] {
                            "Iceman"});
#line 29
    testRunner.Given("these heroes registrations", ((string)(null)), table4, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Location"});
                table5.AddRow(new string[] {
                            "End Of Mission",
                            "Secret"});
#line 33
    testRunner.When("these events occur", ((string)(null)), table5, "When ");
#line hidden
#line 36
    testRunner.Then("the intervention plan should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="You can prevent a Tsunami with Water (aqua)")]
        [Xunit.TraitAttribute("FeatureTitle", "Main Rules")]
        [Xunit.TraitAttribute("Description", "You can prevent a Tsunami with Water (aqua)")]
        [Xunit.TraitAttribute("Category", "main")]
        public virtual void YouCanPreventATsunamiWithWaterAqua()
        {
            string[] tagsOfScenario = new string[] {
                    "main"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("You can prevent a Tsunami with Water (aqua)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 39
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table6.AddRow(new string[] {
                            "Aquaria Neptunia"});
#line 40
    testRunner.Given("these heroes registrations", ((string)(null)), table6, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Location"});
                table7.AddRow(new string[] {
                            "Tsunami",
                            "New York"});
#line 43
    testRunner.When("these events occur", ((string)(null)), table7, "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Hero",
                            "Location",
                            "Action"});
                table8.AddRow(new string[] {
                            "Aquaria Neptunia",
                            "New York",
                            "Prevent"});
#line 46
    testRunner.Then("the intervention plan should be", ((string)(null)), table8, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="You can prevent a Tsunami with Water (ice)")]
        [Xunit.TraitAttribute("FeatureTitle", "Main Rules")]
        [Xunit.TraitAttribute("Description", "You can prevent a Tsunami with Water (ice)")]
        [Xunit.TraitAttribute("Category", "main")]
        public virtual void YouCanPreventATsunamiWithWaterIce()
        {
            string[] tagsOfScenario = new string[] {
                    "main"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("You can prevent a Tsunami with Water (ice)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 52
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table9.AddRow(new string[] {
                            "Mara Rice"});
#line 53
    testRunner.Given("these heroes registrations", ((string)(null)), table9, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Location"});
                table10.AddRow(new string[] {
                            "Tsunami",
                            "New York"});
#line 56
    testRunner.When("these events occur", ((string)(null)), table10, "When ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Hero",
                            "Location",
                            "Action"});
                table11.AddRow(new string[] {
                            "Mara Rice",
                            "New York",
                            "Prevent"});
#line 59
    testRunner.Then("the intervention plan should be", ((string)(null)), table11, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="You can prevent a Tsunami with Water (water)")]
        [Xunit.TraitAttribute("FeatureTitle", "Main Rules")]
        [Xunit.TraitAttribute("Description", "You can prevent a Tsunami with Water (water)")]
        [Xunit.TraitAttribute("Category", "main")]
        public virtual void YouCanPreventATsunamiWithWaterWater()
        {
            string[] tagsOfScenario = new string[] {
                    "main"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("You can prevent a Tsunami with Water (water)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 64
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table12.AddRow(new string[] {
                            "Ella Pinkwater"});
#line 65
    testRunner.Given("these heroes registrations", ((string)(null)), table12, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Location"});
                table13.AddRow(new string[] {
                            "Tsunami",
                            "New York"});
#line 68
    testRunner.When("these events occur", ((string)(null)), table13, "When ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Hero",
                            "Location",
                            "Action"});
                table14.AddRow(new string[] {
                            "Ella Pinkwater",
                            "New York",
                            "Prevent"});
#line 71
    testRunner.Then("the intervention plan should be", ((string)(null)), table14, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="You need Air to repair a Tsunami")]
        [Xunit.TraitAttribute("FeatureTitle", "Main Rules")]
        [Xunit.TraitAttribute("Description", "You need Air to repair a Tsunami")]
        [Xunit.TraitAttribute("Category", "main")]
        public virtual void YouNeedAirToRepairATsunami()
        {
            string[] tagsOfScenario = new string[] {
                    "main"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("You need Air to repair a Tsunami", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 76
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table15.AddRow(new string[] {
                            "Lasher"});
#line 77
    testRunner.Given("these heroes registrations", ((string)(null)), table15, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Location"});
                table16.AddRow(new string[] {
                            "Tsunami",
                            "New York"});
#line 80
    testRunner.When("these events occur", ((string)(null)), table16, "When ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Hero",
                            "Location",
                            "Action"});
                table17.AddRow(new string[] {
                            "Lasher",
                            "New York",
                            "Repair"});
#line 83
    testRunner.Then("the intervention plan should be", ((string)(null)), table17, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="No need to repair if you can prevent")]
        [Xunit.TraitAttribute("FeatureTitle", "Main Rules")]
        [Xunit.TraitAttribute("Description", "No need to repair if you can prevent")]
        [Xunit.TraitAttribute("Category", "main")]
        public virtual void NoNeedToRepairIfYouCanPrevent()
        {
            string[] tagsOfScenario = new string[] {
                    "main"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No need to repair if you can prevent", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 88
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table18.AddRow(new string[] {
                            "Lasher"});
                table18.AddRow(new string[] {
                            "Aquaria Neptunia"});
#line 89
    testRunner.Given("these heroes registrations", ((string)(null)), table18, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Location"});
                table19.AddRow(new string[] {
                            "Tsunami",
                            "New York"});
#line 93
    testRunner.When("these events occur", ((string)(null)), table19, "When ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Hero",
                            "Location",
                            "Action"});
                table20.AddRow(new string[] {
                            "Aquaria Neptunia",
                            "New York",
                            "Prevent"});
                table20.AddRow(new string[] {
                            "Lasher",
                            "Batcave",
                            "Standby"});
#line 96
    testRunner.Then("the intervention plan should be", ((string)(null)), table20, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="You need Fire to prevent a meteorite")]
        [Xunit.TraitAttribute("FeatureTitle", "Main Rules")]
        [Xunit.TraitAttribute("Description", "You need Fire to prevent a meteorite")]
        [Xunit.TraitAttribute("Category", "main")]
        public virtual void YouNeedFireToPreventAMeteorite()
        {
            string[] tagsOfScenario = new string[] {
                    "main"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("You need Fire to prevent a meteorite", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 102
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table21.AddRow(new string[] {
                            "Cornfed"});
#line 103
    testRunner.Given("these heroes registrations", ((string)(null)), table21, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Location"});
                table22.AddRow(new string[] {
                            "Meteorite",
                            "New York"});
#line 106
    testRunner.When("these events occur", ((string)(null)), table22, "When ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "Hero",
                            "Location",
                            "Action"});
                table23.AddRow(new string[] {
                            "Cornfed",
                            "New York",
                            "Prevent"});
#line 109
    testRunner.Then("the intervention plan should be", ((string)(null)), table23, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="If a meteorite can\'t be prevented, a water able hero must be send")]
        [Xunit.TraitAttribute("FeatureTitle", "Main Rules")]
        [Xunit.TraitAttribute("Description", "If a meteorite can\'t be prevented, a water able hero must be send")]
        [Xunit.TraitAttribute("Category", "main")]
        public virtual void IfAMeteoriteCantBePreventedAWaterAbleHeroMustBeSend()
        {
            string[] tagsOfScenario = new string[] {
                    "main"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("If a meteorite can\'t be prevented, a water able hero must be send", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 114
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table24.AddRow(new string[] {
                            "Aquaria Neptunia"});
#line 115
    testRunner.Given("these heroes registrations", ((string)(null)), table24, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Location"});
                table25.AddRow(new string[] {
                            "Meteorite",
                            "New York"});
#line 118
    testRunner.When("these events occur", ((string)(null)), table25, "When ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Hero",
                            "Location",
                            "Action"});
                table26.AddRow(new string[] {
                            "Aquaria Neptunia",
                            "New York",
                            "Repair"});
#line 121
    testRunner.Then("the intervention plan should be", ((string)(null)), table26, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                MainRulesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                MainRulesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
