// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Oracle
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BonusRulesFeature : object, Xunit.IClassFixture<BonusRulesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "3_BonusRules.feature"
#line hidden
        
        public BonusRulesFeature(BonusRulesFeature.FixtureData fixtureData, Oracle_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Bonus Rules", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
  #line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Eye",
                        "Alive",
                        "Appearances",
                        "First Appearance",
                        "Hair",
                        "Sex",
                        "Align",
                        "Id",
                        "Secret"});
            table28.AddRow(new string[] {
                        "Aquaria Neptunia",
                        "Blue Eyes",
                        "Living Characters",
                        "139",
                        "May-47",
                        "Blond Hair",
                        "Female Characters",
                        "Good Characters",
                        "Secret Identity",
                        "ccefd65a-0f7e-4a98-bffe-c6f9cc12ddd1"});
            table28.AddRow(new string[] {
                        "Tricephalous",
                        "Red Eyes",
                        "Living Characters",
                        "13",
                        "Nov-61",
                        "No Hair",
                        "Male Characters",
                        "",
                        "Secret Identity",
                        "9c5cd16f-2b7c-4ee8-84a5-a76db7ae8826"});
            table28.AddRow(new string[] {
                        "Lasher",
                        "White Eyes",
                        "Living Characters",
                        "14",
                        "May-93",
                        "Bald",
                        "Agender Characters",
                        "Neutral Characters",
                        "Secret Identity",
                        "37632ead-13a7-45e4-aea3-495562265699"});
#line 4
    testRunner.Given("these heroes may register", ((string)(null)), table28, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Always prevent and repair the strongest events")]
        [Xunit.TraitAttribute("FeatureTitle", "Bonus Rules")]
        [Xunit.TraitAttribute("Description", "Always prevent and repair the strongest events")]
        [Xunit.TraitAttribute("Category", "bonus")]
        public virtual void AlwaysPreventAndRepairTheStrongestEvents()
        {
            string[] tagsOfScenario = new string[] {
                    "bonus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Always prevent and repair the strongest events", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 11
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table29.AddRow(new string[] {
                            "Lasher"});
                table29.AddRow(new string[] {
                            "Aquaria Neptunia"});
#line 12
    testRunner.Given("these heroes registrations", ((string)(null)), table29, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Location",
                            "Strength"});
                table30.AddRow(new string[] {
                            "Tsunami",
                            "New York",
                            "20"});
                table30.AddRow(new string[] {
                            "Tsunami",
                            "Paris",
                            "30"});
                table30.AddRow(new string[] {
                            "Tsunami",
                            "Aquaville",
                            "5"});
#line 16
    testRunner.When("these events occur", ((string)(null)), table30, "When ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "Hero",
                            "Location",
                            "Action"});
                table31.AddRow(new string[] {
                            "Aquaria Neptunia",
                            "Paris",
                            "Prevent"});
                table31.AddRow(new string[] {
                            "Lasher",
                            "New York",
                            "Repair"});
#line 21
    testRunner.Then("the intervention plan should be", ((string)(null)), table31, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Tricephalous can\'t prevent the meteorite because he has no Fire Power")]
        [Xunit.TraitAttribute("FeatureTitle", "Bonus Rules")]
        [Xunit.TraitAttribute("Description", "Tricephalous can\'t prevent the meteorite because he has no Fire Power")]
        [Xunit.TraitAttribute("Category", "bonus")]
        public virtual void TricephalousCantPreventTheMeteoriteBecauseHeHasNoFirePower()
        {
            string[] tagsOfScenario = new string[] {
                    "bonus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tricephalous can\'t prevent the meteorite because he has no Fire Power", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 27
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table32.AddRow(new string[] {
                            "Tricephalous"});
#line 28
    testRunner.Given("these heroes registrations", ((string)(null)), table32, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Location"});
                table33.AddRow(new string[] {
                            "Meteorite",
                            "New York"});
#line 31
    testRunner.When("these events occur", ((string)(null)), table33, "When ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Hero",
                            "Location",
                            "Action"});
                table34.AddRow(new string[] {
                            "Tricephalous",
                            "New York",
                            "Repair"});
#line 34
    testRunner.Then("the intervention plan should be", ((string)(null)), table34, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="If the event cannot be prevented nor repaired, event strength * 2 of heroes must " +
            "go the the place", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Bonus Rules")]
        [Xunit.TraitAttribute("Description", "If the event cannot be prevented nor repaired, event strength * 2 of heroes must " +
            "go the the place")]
        [Xunit.TraitAttribute("Category", "bonus")]
        public virtual void IfTheEventCannotBePreventedNorRepairedEventStrength2OfHeroesMustGoTheThePlace()
        {
            string[] tagsOfScenario = new string[] {
                    "bonus",
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("If the event cannot be prevented nor repaired, event strength * 2 of heroes must " +
                    "go the the place", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 41
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table35.AddRow(new string[] {
                            "?"});
                table35.AddRow(new string[] {
                            "?"});
#line 42
    testRunner.Given("these heroes registrations", ((string)(null)), table35, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Location"});
                table36.AddRow(new string[] {
                            "Meteorite",
                            "New York"});
#line 46
    testRunner.When("these events occur", ((string)(null)), table36, "When ");
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "Hero",
                            "Location"});
                table37.AddRow(new string[] {
                            "Azura",
                            "New York"});
#line 49
    testRunner.Then("the intervention plan should be", ((string)(null)), table37, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BonusRulesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BonusRulesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
